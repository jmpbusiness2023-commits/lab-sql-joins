-- SQL Joins Lab --

-- Challenge - Joining on multiple tables --

-- 1. List the number of films per category
SELECT c.name AS category_name,
       COUNT(f.film_id) AS number_of_films
FROM category c
LEFT JOIN film_category fc ON c.category_id = fc.category_id
LEFT JOIN film f ON fc.film_id = f.film_id
GROUP BY c.category_id
ORDER BY number_of_films DESC;

-- 2. Store ID, City, and Country for each store
SELECT s.store_id,
       city.city,
       country.country
FROM store s
INNER JOIN address a ON s.address_id = a.address_id
INNER JOIN city ON a.city_id = city.city_id
INNER JOIN country ON city.country_id = country.country_id;

-- 3. Total Revenue generated by each store in dollars
SELECT s.store_id,
       SUM(p.amount) AS total_revenue
FROM store s
INNER JOIN staff st ON s.store_id = st.store_id
INNER JOIN payment p ON st.staff_id = p.staff_id
GROUP BY s.store_id
ORDER BY total_revenue DESC;

-- 4. Average Running time of films for each category
SELECT c.name AS category_name,
       ROUND(AVG(f.length)) AS average_running_time
FROM category c
LEFT JOIN film_category fc ON c.category_id = fc.category_id
LEFT JOIN film f ON fc.film_id = f.film_id
GROUP BY c.category_id
ORDER BY average_running_time DESC;

-- Bonus --

-- 5. The film categories with the longest average running time
SELECT c.name AS category_name,
       ROUND(AVG(f.length)) AS average_running_time
FROM category c
LEFT JOIN film_category fc ON c.category_id = fc.category_id
LEFT JOIN film f ON fc.film_id = f.film_id
GROUP BY c.category_id
HAVING ROUND(AVG(f.length)) = (
    SELECT MAX(avg_len)
    FROM (
        SELECT ROUND(AVG(f2.length)) AS avg_len
        FROM category c2
        LEFT JOIN film_category fc2 ON c2.category_id = fc2.category_id
        LEFT JOIN film f2 ON fc2.film_id = f2.film_id
        GROUP BY c2.category_id
    ) AS sub
);

-- 6. Top 10 most frequently rented movies in descending order
SELECT f.title,
       COUNT(r.rental_id) AS rental_count
FROM film f
INNER JOIN inventory i ON f.film_id = i.film_id
INNER JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id
ORDER BY rental_count DESC
LIMIT 10;

-- 7. Can "Academy Dinosaur" can be rented from Store 1?
SELECT CASE
           WHEN COUNT(r.rental_id) > 0 THEN 'Available'
           ELSE 'Not Available'
       END AS availability
FROM film f
INNER JOIN inventory i ON f.film_id = i.film_id
INNER JOIN rental r ON i.inventory_id = r.inventory_id
INNER JOIN store s ON i.store_id = s.store_id
WHERE f.title = 'Academy Dinosaur'
  AND s.store_id = 1;

-- 8. list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT f.title,
         CASE
              WHEN COUNT(i.inventory_id) > 0 THEN 'Available'
              ELSE 'NOT available'
         END AS availability_status
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
GROUP BY f.title;
